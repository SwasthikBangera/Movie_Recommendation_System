# -*- coding: utf-8 -*-
"""MovieRecommedation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2DckDv0hyHG8ssh44pPJBE9F_yW_4uP

Import dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data importing and cleaning"""

# Import the movie data set
movie_dataset = pd.read_csv('/content/movies.csv')

#Printing the first 5 rows 
movie_dataset.head()

#Total no of values 
movie_dataset.shape

# Selecting relevant features 
selected_features = ['genres','keywords','tagline','cast','director','original_language','popularity','status']
print(selected_features)

# Null values in selected featur
movie_dataset[selected_features].isnull().sum()

# Replace Null values with Null string
for feature in selected_features:
  movie_dataset[feature] = movie_dataset[feature].fillna('')

# Verifying Null value removal
movie_dataset[selected_features].isnull().sum()

# Combining Selected features
combined_features = movie_dataset['genres']+' '+movie_dataset['keywords']+' '+movie_dataset['tagline']+' '+movie_dataset['cast']+' '+movie_dataset['director']+' '+movie_dataset['original_language']+' '+movie_dataset['status']

combined_features.head()

# Converting text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

# Obtaining the similarity scores
similarity = cosine_similarity(feature_vectors)

print(similarity)

similarity.shape

#Creating list of all movies in movie dataset
list_of_titles = movie_dataset['title'].tolist()
print(list_of_titles)

# Input from user 
movie_name = input("Enter your favourite movie name :")

# Verifying match for user provided movie name 
find_match = difflib.get_close_matches(movie_name, list_of_titles)
print(find_match)

# Closest match
close_match = find_match[0]

# Index of closely match movie in the Movie dataset
index_movie_dataset = movie_dataset[movie_dataset.title == close_match]['index'].values[0]
print(index_movie_dataset)

# Find the similarity score
similarity_score = list(enumerate(similarity[index_movie_dataset]))
print(similarity_score)

# Sort similar movies
sorted_movies = sorted(similarity_score, key = lambda x:x[1], reverse=True)
print(sorted_movies)

#from operator import index
# Print name of the sorted movies

print("Movies suggested to you : \n")

i=1

for movie in sorted_movies:
  index = movie[0]
  title_from_index = movie_dataset[movie_dataset.index == index]['title'].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i += 1

"""Movie Recommendation system"""

# System that recommends movies

movie_name = input("Enter your favourite movie name :")

list_of_titles = movie_dataset['title'].tolist()

find_match = difflib.get_close_matches(movie_name, list_of_titles)

close_match = find_match[0]

index_movie_dataset = movie_dataset[movie_dataset.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_movie_dataset]))

sorted_movies = sorted(similarity_score, key = lambda x:x[1], reverse=True)

print("Movies suggested to you : \n")

i=1

for movie in sorted_movies:
  index = movie[0]
  title_from_index = movie_dataset[movie_dataset.index == index]['title'].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i += 1